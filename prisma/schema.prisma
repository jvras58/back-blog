// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id       String    @id @default(cuid())
  name     String    @unique
  profiles Profile[]
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String    @unique
  
  
  password      String?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profile       Profile?
  accounts      Account[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Profile {
  id       String     @id @default(cuid())
  userId   String     @unique
  roleId   String
  sexo     String?
  dataNascimento DateTime?
  curriculum String?
  celular  String
  telefone String?
  sobre    String?
  
  enderecos Endereco[]
  formacoes Formacao[]
  
  user     User       @relation(fields: [userId], references: [id])
  role     Role       @relation(fields: [roleId], references: [id])
  planosAula  planoAula[]
}

model Endereco {
  id          String  @id @default(cuid())
  profileId   String
  cep         String
  rua         String?
  numero      String?
  complemento String?
  estado      String
  municipio   String
  bairro      String
  
  profile     Profile @relation(fields: [profileId], references: [id])
}

model Formacao {
  id              String   @id @default(cuid())
  profileId       String
  tipo_formacao   String
  titulo_formacao String
  instituicao     String
  data_conclusao  DateTime?
  
  profile         Profile  @relation(fields: [profileId], references: [id])
}


model VerificationToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model planoAula {
  id          String   @id @default(cuid())
  authorId    String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Profile     Profile? @relation(fields: [profileId], references: [id])
  profileId   String?
}
